/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RunningImport } from './routes/running'
import { Route as IndexImport } from './routes/index'
import { Route as StatsIndexImport } from './routes/stats/index'
import { Route as StatsStatsIdImport } from './routes/stats/$statsId'
import { Route as DbDbNameImport } from './routes/db/$dbName'

// Create/Update Routes

const RunningRoute = RunningImport.update({
  id: '/running',
  path: '/running',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const StatsIndexRoute = StatsIndexImport.update({
  id: '/stats/',
  path: '/stats/',
  getParentRoute: () => rootRoute,
} as any)

const StatsStatsIdRoute = StatsStatsIdImport.update({
  id: '/stats/$statsId',
  path: '/stats/$statsId',
  getParentRoute: () => rootRoute,
} as any)

const DbDbNameRoute = DbDbNameImport.update({
  id: '/db/$dbName',
  path: '/db/$dbName',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/running': {
      id: '/running'
      path: '/running'
      fullPath: '/running'
      preLoaderRoute: typeof RunningImport
      parentRoute: typeof rootRoute
    }
    '/db/$dbName': {
      id: '/db/$dbName'
      path: '/db/$dbName'
      fullPath: '/db/$dbName'
      preLoaderRoute: typeof DbDbNameImport
      parentRoute: typeof rootRoute
    }
    '/stats/$statsId': {
      id: '/stats/$statsId'
      path: '/stats/$statsId'
      fullPath: '/stats/$statsId'
      preLoaderRoute: typeof StatsStatsIdImport
      parentRoute: typeof rootRoute
    }
    '/stats/': {
      id: '/stats/'
      path: '/stats'
      fullPath: '/stats'
      preLoaderRoute: typeof StatsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/running': typeof RunningRoute
  '/db/$dbName': typeof DbDbNameRoute
  '/stats/$statsId': typeof StatsStatsIdRoute
  '/stats': typeof StatsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/running': typeof RunningRoute
  '/db/$dbName': typeof DbDbNameRoute
  '/stats/$statsId': typeof StatsStatsIdRoute
  '/stats': typeof StatsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/running': typeof RunningRoute
  '/db/$dbName': typeof DbDbNameRoute
  '/stats/$statsId': typeof StatsStatsIdRoute
  '/stats/': typeof StatsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/running' | '/db/$dbName' | '/stats/$statsId' | '/stats'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/running' | '/db/$dbName' | '/stats/$statsId' | '/stats'
  id:
    | '__root__'
    | '/'
    | '/running'
    | '/db/$dbName'
    | '/stats/$statsId'
    | '/stats/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RunningRoute: typeof RunningRoute
  DbDbNameRoute: typeof DbDbNameRoute
  StatsStatsIdRoute: typeof StatsStatsIdRoute
  StatsIndexRoute: typeof StatsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RunningRoute: RunningRoute,
  DbDbNameRoute: DbDbNameRoute,
  StatsStatsIdRoute: StatsStatsIdRoute,
  StatsIndexRoute: StatsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/running",
        "/db/$dbName",
        "/stats/$statsId",
        "/stats/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/running": {
      "filePath": "running.tsx"
    },
    "/db/$dbName": {
      "filePath": "db/$dbName.tsx"
    },
    "/stats/$statsId": {
      "filePath": "stats/$statsId.tsx"
    },
    "/stats/": {
      "filePath": "stats/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
